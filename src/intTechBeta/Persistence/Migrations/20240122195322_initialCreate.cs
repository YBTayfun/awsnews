using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Persistence.Migrations
{
    /// <inheritdoc />
    public partial class initialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 162, 73, 116, 81, 187, 180, 233, 108, 187, 63, 78, 98, 128, 247, 0, 60, 69, 127, 72, 210, 179, 47, 229, 140, 176, 192, 133, 88, 19, 159, 162, 163, 30, 179, 232, 116, 99, 109, 74, 86, 63, 16, 6, 28, 147, 64, 206, 85, 206, 123, 148, 251, 30, 132, 74, 36, 207, 242, 252, 204, 124, 244, 202, 175 }, new byte[] { 8, 48, 61, 250, 233, 197, 147, 172, 17, 221, 104, 170, 156, 91, 217, 17, 228, 33, 38, 234, 126, 84, 164, 24, 151, 205, 75, 65, 50, 123, 156, 100, 209, 91, 93, 139, 110, 116, 29, 37, 53, 81, 162, 154, 156, 169, 213, 40, 163, 24, 56, 124, 116, 199, 99, 159, 131, 30, 57, 31, 140, 135, 74, 170, 11, 235, 168, 195, 142, 16, 201, 66, 6, 250, 108, 153, 234, 154, 131, 171, 68, 55, 106, 131, 24, 197, 198, 4, 22, 241, 210, 239, 177, 225, 70, 168, 3, 235, 180, 33, 102, 2, 18, 217, 179, 121, 217, 154, 221, 222, 210, 184, 141, 82, 152, 169, 76, 99, 111, 83, 166, 70, 202, 9, 227, 101, 216, 61 } });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.UpdateData(
                table: "Users",
                keyColumn: "Id",
                keyValue: 1,
                columns: new[] { "PasswordHash", "PasswordSalt" },
                values: new object[] { new byte[] { 7, 60, 45, 190, 48, 250, 61, 43, 39, 191, 214, 197, 114, 104, 193, 253, 167, 172, 206, 235, 142, 245, 175, 154, 17, 57, 157, 14, 149, 22, 229, 120, 219, 221, 93, 196, 121, 255, 239, 0, 10, 37, 221, 13, 10, 185, 83, 73, 169, 39, 74, 76, 59, 240, 99, 202, 31, 115, 188, 181, 138, 126, 11, 145 }, new byte[] { 147, 189, 219, 54, 145, 196, 152, 71, 229, 55, 203, 8, 24, 124, 92, 145, 151, 232, 249, 43, 122, 58, 186, 36, 203, 135, 45, 208, 17, 164, 5, 124, 69, 17, 254, 178, 37, 93, 223, 75, 121, 18, 229, 202, 169, 203, 196, 134, 168, 31, 144, 192, 222, 216, 115, 113, 181, 230, 183, 66, 15, 46, 193, 171, 241, 54, 178, 33, 194, 251, 50, 91, 64, 157, 210, 62, 110, 8, 5, 164, 105, 14, 60, 183, 184, 49, 233, 0, 36, 149, 175, 206, 64, 241, 149, 202, 91, 221, 34, 18, 142, 244, 0, 190, 99, 150, 157, 84, 152, 87, 119, 125, 109, 25, 94, 40, 20, 148, 71, 76, 0, 192, 145, 109, 106, 160, 51, 7 } });
        }
    }
}
